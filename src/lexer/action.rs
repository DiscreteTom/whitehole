//! ## Design
//!
//! For a better engineering experience, the lexer is designed to be modular
//! and consists of many [`Action`]s. Each action is a small piece of logic
//! which will digest some bytes from the rest of the text input, and optionally yield a token.
//! By doing so, users can easily compose their own lexer by re-using existing actions.
//! Users can also share their actions with others by publishing them as a library,
//! or build higher-level libraries to generate actions.
//!
//! ## For Developers
//!
//! Here is the recommended order of reading the source code:
//!
//! - [`self::input`]
//! - [`self::output`]
//! - [`self`]
//! - [`self::decorator`]
//! - [`self::simple`]
//! - [`self::utils`]

mod decorator;
mod input;
mod output;
mod simple;
mod utils;

pub use decorator::*;
pub use input::*;
pub use output::*;
pub use simple::*;
pub use utils::*;

use super::token::TokenKindId;
use std::collections::HashSet;

/// See [`Action::head`].
#[derive(PartialEq, Debug, Clone)]
pub enum HeadMatcher {
  OneOf(HashSet<char>),
  Not(HashSet<char>),
  /// Match any characters that are not known in
  /// [`OneOf`](HeadMatcher::OneOf) or [`Not`](HeadMatcher::Not).
  Unknown,
}

pub struct ActionBase<Kind: 'static, Exec> {
  /// See [`Self::kind`].
  kind: &'static TokenKindId<Kind>,
  /// See [`Self::literal`].
  literal: Option<String>,
  /// See [`Self::head`].
  head: Option<HeadMatcher>,
  /// See [`Self::muted`].
  muted: bool,

  exec: Exec,
}

// getters
impl<Kind, Exec> ActionBase<Kind, Exec> {
  /// This is used to accelerate expectational lexing if an expected kind is provided,
  /// see [`Expectation::kind`](crate::lexer::expectation::Expectation::kind).
  /// Every action must have this field set by [`Self::bind`],
  /// [`Self::bind_default`] or [`Self::select`].
  // these method will ensure the integrity between the `Self::kind` and the `ActionOutput::kind`
  #[inline]
  pub const fn kind(&self) -> &'static TokenKindId<Kind> {
    &self.kind
  }

  /// This is used to accelerate expectational lexing if an expected literal is provided,
  /// see [`Expectation::literal`](crate::lexer::expectation::Expectation::literal).
  /// If set, tokens' text content generated by this action must equals to this value
  /// (but this won't be checked during the runtime).
  /// This field is optional and can only be set via [`exact`] and [`word`].
  #[inline]
  pub const fn literal(&self) -> &Option<String> {
    &self.literal
  }

  /// This is used to accelerate lexing by the first character
  /// of the rest of the input. This is optional but highly recommended.
  /// Some [`utils`] already set this field safely (e.g. [`exact`] and [`word`]) and you should use them as much as possible.
  /// If you want to set this field manually,
  /// this could be set by [`Self::unchecked_head_in`], [`Self::unchecked_head_in_range`],
  /// [`Self::unchecked_head_not`] or [`Self::unchecked_head_unknown`].
  #[inline]
  pub const fn head(&self) -> &Option<HeadMatcher> {
    &self.head
  }

  /// Muted actions won't yield tokens and won't stop a lexing process from running.
  /// This field could be set via [`Self::mute`] or [`Self::unmute`].
  #[inline]
  pub const fn muted(&self) -> bool {
    self.muted
  }

  /// Execute the action.
  #[inline]
  pub const fn exec(&self) -> &Exec {
    &self.exec
  }
}

type ImmutableActionExec<Kind, ActionState, ErrorType> =
  Box<dyn Fn(&ActionInput<&ActionState>) -> Option<ActionOutput<Kind, Option<ErrorType>>>>;

type MutableActionExec<Kind, ActionState, ErrorType> =
  Box<dyn Fn(&mut ActionInput<&mut ActionState>) -> Option<ActionOutput<Kind, Option<ErrorType>>>>;

pub enum ActionExec<Kind, ActionState, ErrorType> {
  Immutable(ImmutableActionExec<Kind, ActionState, ErrorType>),
  Mutable(MutableActionExec<Kind, ActionState, ErrorType>),
}

/// Conditionally convert [`ActionInput<&mut ActionState>`] to [`ActionInput<&ActionState>`].
///
/// Usage:
/// - `action_input_to_ref(input, true)`: `&input.as_ref()`
/// - `action_input_to_ref(input, false)`: `input`
macro_rules! action_input_to_ref {
  ($input: ident, true) => {
    &$input.as_ref()
  };
  ($input: ident, false) => {
    $input
  };
}
pub(super) use action_input_to_ref;

#[cfg(test)]
impl<Kind, ActionState, ErrorType> ActionExec<Kind, ActionState, ErrorType> {
  pub(super) fn as_immutable(&self) -> &ImmutableActionExec<Kind, ActionState, ErrorType> {
    match self {
      ActionExec::Immutable(exec) => exec,
      ActionExec::Mutable(_) => panic!("ActionExec is mutable"),
    }
  }

  pub(super) fn as_mutable(&self) -> &MutableActionExec<Kind, ActionState, ErrorType> {
    match self {
      ActionExec::Immutable(_) => panic!("ActionExec is immutable"),
      ActionExec::Mutable(exec) => exec,
    }
  }
}

/// To create this, use [`simple`](simple::simple), [`simple_with_data`](simple::simple_with_data)
/// or [`utils`] (like [`regex`](utils::regex), [`exact`], [`word`]).
pub type Action<Kind, ActionState = (), ErrorType = ()> =
  ActionBase<Kind, ActionExec<Kind, ActionState, ErrorType>>;

#[cfg(test)]
mod tests {
  use super::*;
  use crate::lexer::token::SubTokenKind;
  use whitehole_macros::_token_kind;

  #[_token_kind]
  #[derive(Debug)]
  enum MyKind {
    A,
  }

  #[test]
  fn action_getters_default() {
    let action: Action<_> = Action {
      exec: ActionExec::Immutable(Box::new(|_| None)),
      kind: A::kind_id(),
      head: None,
      muted: false,
      literal: None,
    };
    assert!(!action.muted());
    assert_eq!(action.kind(), A::kind_id());
    assert!(action.head().is_none());
    assert!(action.literal().is_none());
  }

  #[test]
  fn action_getters() {
    let action: Action<_> = Action {
      exec: ActionExec::Immutable(Box::new(|_| None)),
      kind: A::kind_id(),
      head: Some(HeadMatcher::OneOf(HashSet::from(['a']))),
      muted: true,
      literal: Some("123".into()),
    };
    assert!(action.muted());
    assert_eq!(action.kind(), A::kind_id());
    assert!(matches!(action.head(), Some(HeadMatcher::OneOf(set)) if set == &HashSet::from(['a'])));
    assert_eq!(action.literal(), &Some("123".into()));
  }
}
