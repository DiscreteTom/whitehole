use std::{
  any::type_name,
  fmt::{self, Debug},
  hash::{Hash, Hasher},
  marker::PhantomData,
};

/// The unique id of a sub token kind.
/// The value is the index of the enum variant.
/// The token kind id and the token kind value can be bound together
/// by [`TokenKindIdBinding`](super::TokenKindIdBinding).
/// The bindings can be auto generated by applying [`token_kind`](crate::lexer::token::token_kind)
/// to the token kind enum.
/// # Examples
/// ```
/// use whitehole::lexer::token::{token_kind, TokenKindIdBinding};
///
/// #[token_kind]
/// #[derive(Debug)]
/// enum MyKind { A, B(i32) }
/// // struct `A` and `B` are generated by the macro
/// // and implement `Into<TokenKindIdBinding<MyKind>>`
///
/// # fn main() {
/// let a: TokenKindIdBinding<MyKind> = A.into();
/// let b1: TokenKindIdBinding<MyKind> = B(1).into();
/// let b2: TokenKindIdBinding<MyKind> = B(2).into();
/// assert_eq!(a.id(), a.id());
/// assert_eq!(b1.id(), b2.id());
/// assert_ne!(a.id(), b1.id());
/// # }
/// ```
/// # Design
/// ## Why not just use [`std::mem::Discriminant`]?
/// `Discriminant` is good, it can be used to get the unique id of an enum variant value,
/// so with `Discriminant` we don't need [`TokenKindIdBinding`](super::TokenKindIdBinding) anymore.
/// However `Discriminant` requires an instance of the enum to construct it,
/// so when using [`Action::select`](crate::lexer::action::Action::select),
/// or in the implementations of [`SubTokenKind`](super::SubTokenKind),
/// or in expectational lexing,
/// we need to construct the variant value first, just to get the id,
/// which is neither necessary nor convenient.
/// ## Why not just use [`std::any::TypeId`]?
/// - We hope the id is type-sensitive (that's why there is a [`PhantomData`] in the struct),
/// `TypeId` is not.
/// - Currently `TypeId` use 128 bits to represent the type, which is too large for our purpose.
/// ## Others
/// By using `usize` as the id, we can use this as the index of a lookup table.
/// And it is small enough to be passed around by value.
pub struct TokenKindId<Kind> {
  value: usize,
  __: PhantomData<Kind>,
}

impl<Kind> TokenKindId<Kind> {
  /// You should NEVER call this function directly.
  /// This function should only be used in the [`token_kind`](super::token_kind) macro.
  #[inline]
  pub const fn new(value: usize) -> Self {
    Self {
      value,
      __: PhantomData,
    }
  }

  /// The index of the enum variant.
  #[inline]
  pub const fn value(&self) -> usize {
    self.value
  }
}

// manually implement these traits to avoid `Kind`
// being `Debug`, `Clone`, `Copy`, `Eq`, `PartialEq`, `Hash`
impl<Kind> Debug for TokenKindId<Kind> {
  #[inline]
  fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
    f.debug_tuple(&format!("TokenKindId<{}>", type_name::<Kind>()))
      .field(&self.value)
      .finish()
  }
}
impl<Kind> Clone for TokenKindId<Kind> {
  #[inline]
  fn clone(&self) -> Self {
    Self::new(self.value)
  }
}
impl<Kind> Copy for TokenKindId<Kind> {}
impl<Kind> PartialEq for TokenKindId<Kind> {
  #[inline]
  fn eq(&self, other: &Self) -> bool {
    self.value == other.value
  }
}
impl<Kind> Eq for TokenKindId<Kind> {}
impl<Kind> Hash for TokenKindId<Kind> {
  #[inline]
  fn hash<H: Hasher>(&self, state: &mut H) {
    self.value.hash(state);
  }
}

/// Implement this trait for the token kind enum to provide the default token kind id.
/// This can be auto implemented by the [`token_kind`](crate::lexer::token::token_kind) macro.
/// # Examples
/// ```
/// use whitehole::lexer::token::{
///   token_kind, TokenKindIdBinding, SubTokenKind, DefaultTokenKindId,
/// };
///
/// #[token_kind]
/// #[derive(Default, Debug, PartialEq, Eq)]
/// enum MyKind {
///   #[default]
///   A
/// }
///
/// # fn main() {
/// assert_eq!(MyKind::default_kind_id(), A::kind_id());
/// assert_eq!(MyKind::default(), MyKind::A);
/// # }
/// ```
/// # Design
/// We can't replace this with [`Default`] because otherwise
/// users have to `impl Default for TokenKindId<MyKind>` manually,
/// but [`Default`] and [`TokenKindId`] are both foreign names for user's crate.
///
/// We can't just `impl<T> Default for TokenKindId<T>` either
/// because the default token kind id's value is not always `0`.
pub trait DefaultTokenKindId<Kind> {
  // TODO: use type instead of generic parameter
  fn default_kind_id() -> TokenKindId<Kind>;
}

#[cfg(test)]
mod tests {
  use super::*;
  use crate::lexer::token::SubTokenKind;
  use std::collections::HashSet;
  use whitehole_macros::_token_kind;

  #[_token_kind]
  #[derive(Debug, Default)]
  enum MyKind {
    A,
    #[default]
    B,
  }

  #[test]
  fn token_kind_id_new_and_value() {
    let id = TokenKindId::new(42) as TokenKindId<MyKind>;
    assert_eq!(id.value(), 42);
  }

  #[test]
  fn token_kind_id_clone() {
    // ensure we don't need to impl Clone for MyKind but the clone is still working
    let id = TokenKindId::new(42) as TokenKindId<MyKind>;
    let id_clone = id.clone();
    assert_eq!(id.value, id_clone.value);
  }

  #[test]
  fn token_kind_id_copy() {
    // ensure we don't need to impl Copy for MyKind but the copy is still working
    let id = TokenKindId::new(42) as TokenKindId<MyKind>;
    let id_copy = id;
    assert_eq!(id.value, id_copy.value);
  }

  #[test]
  fn token_kind_id_eq() {
    // ensure we don't need to impl PartialEq for MyKind but the eq is still working
    let id1 = TokenKindId::new(42) as TokenKindId<MyKind>;
    let id2 = TokenKindId::new(42) as TokenKindId<MyKind>;
    assert_eq!(id1, id2);
  }

  #[test]
  fn token_kind_id_hash() {
    // ensure we don't need to impl Hash for MyKind but the hash is still working
    let id1 = TokenKindId::new(42) as TokenKindId<MyKind>;
    let id2 = TokenKindId::new(42) as TokenKindId<MyKind>;
    let set = HashSet::from([id1]);
    assert!(set.contains(&id1));
    assert!(set.contains(&id2));
  }

  #[test]
  fn token_kind_id_debug() {
    assert_eq!(
      format!("{:?}", A::kind_id()),
      "TokenKindId<whitehole::lexer::token::token_kind_id::tests::MyKind>(0)"
    );
  }

  #[test]
  fn default_token_kind_id() {
    // default token kind id is not always 0
    assert_eq!(MyKind::default_kind_id(), B::kind_id());
  }
}
