use super::{SubTokenKind, TokenKindId, TokenKindIdProvider};

/// Bind the token kind value with an [`TokenKindId`].
/// This is readonly to make sure the binding is not broken.
/// # Examples
/// ```
/// use whitehole::lexer::token::{token_kind, TokenKindIdBinding, TokenKindIdProvider, SubTokenKind};
///
/// #[token_kind]
/// #[derive(Debug)]
/// enum MyKind { A, B }
/// // struct `A` and `B` are generated by the macro
/// // and implement `Into<TokenKindIdBinding<MyKind>>`
///
/// # fn main() {
/// let a: TokenKindIdBinding<MyKind> = A.into();
/// let b: TokenKindIdBinding<MyKind> = B.into();
/// assert_eq!(a.id(), A::kind_id());
/// assert_eq!(b.id(), B::kind_id());
/// assert!(matches!(a.value(), MyKind::A));
/// assert!(matches!(b.value(), MyKind::B));
/// # }
/// ```
#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct TokenKindIdBinding<Kind: 'static> {
  /// This is `TokenKindId<TokenKindIdBinding<Kind>>`
  /// instead of `TokenKindId<Kind>`
  /// because when using [`TokenKindIdBinding`] as the token kind
  /// of an [`Action`](crate::lexer::action::Action),
  /// the [`Action::kind`](crate::lexer::action::Action::kind)
  /// should be `TokenKindId<TokenKindIdBinding<Kind>>`.
  id: &'static TokenKindId<Self>,
  value: Kind,
}

impl<Kind> TokenKindIdProvider for TokenKindIdBinding<Kind> {
  type TokenKind = Self;
  #[inline]
  fn id(&self) -> &'static TokenKindId<Self::TokenKind> {
    &self.id
  }
}

impl<Kind> TokenKindIdBinding<Kind> {
  /// Create a new binding from a value of a sub token kind.
  #[inline]
  pub fn new<ViaKind: SubTokenKind<TokenKind = TokenKindIdBinding<Kind>> + Into<Kind>>(
    value: ViaKind,
  ) -> Self {
    Self {
      value: value.into(),
      id: ViaKind::kind_id(),
    }
  }

  /// Get the value of the token kind.
  #[inline]
  pub const fn value(&self) -> &Kind {
    &self.value
  }

  /// Consume self and take the value out.
  #[inline]
  pub fn take(self) -> Kind {
    self.value
  }
}

/// Implement this trait for the token kind enum to provide the default token kind id binding.
/// This can be auto implemented by the [`token_kind`](crate::lexer::token::token_kind) macro.
/// # Examples
/// ```
/// use whitehole::lexer::token::{
///   token_kind, TokenKindIdBinding, SubTokenKind, DefaultTokenKindIdBinding, TokenKindIdProvider,
/// };
///
/// #[token_kind]
/// #[derive(Default, Debug, PartialEq, Eq)]
/// enum MyKind {
///   #[default]
///   A
/// }
///
/// # fn main() {
/// assert_eq!(MyKind::default_kind_id(), A::kind_id());
/// assert_eq!(MyKind::default(), MyKind::A);
///
/// // besides, `Default` will be implemented for `TokenKindIdBinding<MyKind>`
/// assert_eq!(TokenKindIdBinding::<MyKind>::default().id(), A::kind_id());
/// assert_eq!(TokenKindIdBinding::<MyKind>::default().take(), MyKind::A);
/// # }
/// ```
pub trait DefaultTokenKindIdBinding<Kind>: Default {
  fn default_kind_id() -> &'static TokenKindId<TokenKindIdBinding<Kind>>;
}

impl<Kind: DefaultTokenKindIdBinding<Kind>> Default for TokenKindIdBinding<Kind> {
  #[inline]
  fn default() -> Self {
    Self {
      id: Kind::default_kind_id(),
      value: Kind::default(),
    }
  }
}

#[cfg(test)]
mod tests {
  use super::*;
  use whitehole_macros::_token_kind;

  #[_token_kind]
  #[derive(Debug, PartialEq, Default)]
  enum MyKind {
    #[default]
    A,
  }

  #[test]
  fn token_kind_id_binding() {
    let binding = TokenKindIdBinding::new(A);
    assert_eq!(binding.id(), A::kind_id());
    assert_eq!(binding.value(), &MyKind::A);
    assert_eq!(binding.take(), MyKind::A);
  }

  #[test]
  fn default_token_kind_id_binding() {
    assert_eq!(MyKind::default_kind_id(), A::kind_id());
    assert_eq!(MyKind::default(), MyKind::A);

    let binding = TokenKindIdBinding::<MyKind>::default();
    assert_eq!(binding.id(), MyKind::default_kind_id());
    assert_eq!(binding.take(), MyKind::default());
  }
}
